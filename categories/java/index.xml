<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Phantom</title>
    <link>https://phantommmm.github.io/categories/java/</link>
    <description>Recent content in Java on Phantom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Phantom</copyright>
    <lastBuildDate>Mon, 20 Jul 2020 13:39:23 +0800</lastBuildDate>
    
	<atom:link href="https://phantommmm.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SPI机制</title>
      <link>https://phantommmm.github.io/post/spi%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 20 Jul 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/spi%E6%9C%BA%E5%88%B6/</guid>
      <description>SPI机制 SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，</description>
    </item>
    
    <item>
      <title>分布式锁</title>
      <link>https://phantommmm.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Sun, 19 Jul 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>分布式锁 随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署</description>
    </item>
    
    <item>
      <title>Java假泛型</title>
      <link>https://phantommmm.github.io/post/java%E5%81%87%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Thu, 16 Jul 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/java%E5%81%87%E6%B3%9B%E5%9E%8B/</guid>
      <description>Java泛型 Java的泛型是JDK5带来的新特性，其本质是参数化类型，也就是说所操作的数据类型被指定为一个参数（type parameter）</description>
    </item>
    
    <item>
      <title>深拷贝与浅拷贝</title>
      <link>https://phantommmm.github.io/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Thu, 16 Jul 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>深拷贝与浅拷贝 创建对象的五种方式 ​ ①、通过 new 关键字 这是最常用的一种方式，通过 new 关键字调用类的有参或无参构造方法来创建对象。比如 Object obj = new Object(); ②、</description>
    </item>
    
    <item>
      <title>SpringBoot-Starter</title>
      <link>https://phantommmm.github.io/post/springbootstarter/</link>
      <pubDate>Thu, 25 Jun 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/springbootstarter/</guid>
      <description>SpringBoot-Starter springboot相较于spring的一大优点就是提供给我们开箱即用的一些组件，例如spring-starter依赖。它内部引入相关组件</description>
    </item>
    
    <item>
      <title>静态分派与动态分派</title>
      <link>https://phantommmm.github.io/post/%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE%E4%B8%8E%E5%8A%A8%E6%80%81%E5%88%86%E6%B4%BE/</link>
      <pubDate>Sat, 20 Jun 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE%E4%B8%8E%E5%8A%A8%E6%80%81%E5%88%86%E6%B4%BE/</guid>
      <description>静态分派与动态分派 背景 Java 的动态分派和静态分派也是 Java 方法的执行原理。 Java 源代码的编译之后，方法之间的调用是使用符号引用来表示的。当字节码被 JVM 加载</description>
    </item>
    
    <item>
      <title>负载均衡算法</title>
      <link>https://phantommmm.github.io/post/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 13 Jun 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/</guid>
      <description>负载均衡算法 负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高</description>
    </item>
    
  </channel>
</rss>