<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Netty on Phantom</title>
    <link>https://phantommmm.github.io/tags/netty/</link>
    <description>Recent content in Netty on Phantom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Phantom</copyright>
    <lastBuildDate>Sat, 18 Jul 2020 13:39:23 +0800</lastBuildDate>
    
	<atom:link href="https://phantommmm.github.io/tags/netty/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Netty中的Reactor模型</title>
      <link>https://phantommmm.github.io/post/netty%E4%B8%AD%E7%9A%84-reactor%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 18 Jul 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/netty%E4%B8%AD%E7%9A%84-reactor%E6%A8%A1%E5%9E%8B/</guid>
      <description>Netty中的Reactor模型 前面文章介绍了三种 Reactor 的线程模型, 那么它们和 NioEventLoopGroup 又有什么关系呢? 其实, 不同的设置 NioEventLoopGroup 的方式就对应了不同的 Reactor 的线程模</description>
    </item>
    
    <item>
      <title>设计模式-责任链</title>
      <link>https://phantommmm.github.io/post/%E8%B4%A3%E4%BB%BB%E9%93%BE/</link>
      <pubDate>Fri, 03 Jul 2020 13:39:23 +0800</pubDate>
      
      <guid>https://phantommmm.github.io/post/%E8%B4%A3%E4%BB%BB%E9%93%BE/</guid>
      <description>开发中的设计模式&amp;ndash;责任链 背景 开发项目中涉及到当用户接入客服系统时，会按顺序依次经过留言、建立连接、插队、排队的处理器进行处理判断</description>
    </item>
    
  </channel>
</rss>